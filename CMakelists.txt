cmake_minimum_required(VERSION 3.19)

project(LightMan)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(IS_64_BIT TRUE)
else()
    set(IS_64_BIT FALSE)
endif()


# include
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/stb/include)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/stb/src SRC_STB)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/magicenum/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/nlohmann/include)

# src TODO remove to be another porject
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} SRC_TEST)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/ply/include)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/ply/src SRC_PLY)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/platform/)

# Shared Sources
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src SRC)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/scene SRC_SCENE)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/math SRC_MATH)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/geometry SRC_GEOMETRY)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/objects SRC_OBJECTS)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/engine SRC_ENGINE)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/view SRC_VIEW)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/utils SRC_UTILS)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/camera SRC_CAMERA)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/renderer SRC_RENDERER)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/managers SRC_MANAGER)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/materials SRC_MATERIALS)
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/materialnode SRC_MNODES)

# Cross-Platform:: Platform
set(SRC_PLATFORM "")
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/backend SRC_PLATFORM)
if(APPLE AND NOT IOS)
    aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/backend/macos SRC_PLATFORM)
elseif(WIN32 AND IS_64_BIT)
    aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/backend/windows SRC_PLATFORM)
endif()

# Cross-Platform::OpenGL APIs
if(LIGHTMAN_OPENGL)
    if(APPLE OR WIN32 AND NOT IOS)
        add_definitions(-DLIGHTMAN_OPENGL)
        # Using BLUE Load APIS
        set(SRC_OPENGLAPI ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/BlueGL.cpp)
        set(SRC_OPENGLAPI ${SRC_OPENGLAPI} ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/private_BlueGL.h)
        if(APPLE)
            set(SRC_OPENGLAPI ${SRC_OPENGLAPI} ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/BlueGLDarwin.cpp)
            set(SRC_OPENGLAPI ${SRC_OPENGLAPI} ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/BlueGLCoreDarwinUniversalImpl.S)
        elseif(WIN32)
            set(SRC_OPENGLAPI ${SRC_OPENGLAPI} ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/BlueGLWindows.cpp)
            set(SRC_OPENGLAPI ${SRC_OPENGLAPI} ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/BlueGLCoreWindowsImpl.S)
        endif()

        aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/backend/opengl SRC_OPENGLCOMMON)
        list(APPEND SRC_OPENGLAPI ${SRC_OPENGLCOMMON})
    endif()
endif()

# Cross-Platform::PlatformHandle
if(APPLE AND NOT IOS)
    set(SRC_PLATFORMHANDLE ${CMAKE_CURRENT_SOURCE_DIR}/platform/cocoaplatformhandle.mm)
elseif(WIN32 AND IS_64_BIT)
    set(SRC_PLATFORMHANDLE ${CMAKE_CURRENT_SOURCE_DIR}/platform/windowsplatformhandle.cpp)
endif()

# flags
# set(CMAKE_CXX_STANDARD 11)
# set(CMAKE_CXX_STANDARD 14)
# magic_enum need to be C++17
if (WIN32 AND IS_64_BIT)
    enable_language(ASM_MASM)
    set_property(SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/bluegl/src/BlueGLCoreWindowsImpl.S PROPERTY LANGUAGE ASM_MASM)
else()
    enable_language(ASM)
endif()
set(CMAKE_CXX_STANDARD 17)
include(CheckCXXCompilerFlag)
set(CXX_STANDARD "/std:c++latest")
if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W0 /Zc:__cplusplus")
endif()



# target
# add_library(${PROJECT_NAME} ${Src})
add_executable(${PROJECT_NAME} WIN32
    ${SRC_TEST} 
    ${SRC_PLY}
    ${SRC_STB}
    ${SRC}
    ${SRC_SCENE}
    ${SRC_MATH}
    ${SRC_GEOMETRY}
    ${SRC_OBJECTS}
    ${SRC_ENGINE}
    ${SRC_PLATFORM}
    ${SRC_OPENGLAPI}
    ${SRC_VIEW}
    ${SRC_UTILS}
    ${SRC_CAMERA}
    ${SRC_PLATFORMHANDLE}
    ${SRC_RENDERER}
    ${SRC_MANAGER}
    ${SRC_MATERIALS}
    ${SRC_MNODES}
)

if (WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE opengl32 gdi32)
endif()
if(APPLE)
    # add platform dependency
    target_link_libraries(${PROJECT_NAME} PRIVATE "-framework Cocoa")
endif()
